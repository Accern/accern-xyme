# Stubs for pandas.io.packers (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,no-self-use,invalid-name
# pylint: disable=relative-beyond-top-level,line-too-long,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias,signature-differs
# pylint: disable=blacklisted-name,c-extension-no-member


from typing import Any, Optional
from pandas.io.msgpack import Packer as _Packer, Unpacker as _Unpacker

compressor: Any

def to_msgpack(path_or_buf: Any, *args: Any, **kwargs: Any) -> Any:
    ...


def read_msgpack(path_or_buf: Any, encoding: str = ..., iterator: bool = ...,
                 **kwargs: Any) -> Any:
    ...


dtype_dict: Any


def dtype_for(t: Any) -> Any:
    ...


c2f_dict: Any


def c2f(r: Any, i: Any, ctype_name: Any) -> Any:
    ...


def convert(values: Any) -> Any:
    ...


def unconvert(values: Any, dtype: Any, compress: Optional[Any] = ...) -> Any:
    ...


def encode(obj: Any) -> Any:
    ...


def decode(obj: Any) -> Any:
    ...


def pack(o: Any, default: Any = ..., encoding: str = ...,
         unicode_errors: str = ..., use_single_float: bool = ...,
         autoreset: int = ..., use_bin_type: int = ...) -> Any:
    ...


def unpack(packed: Any, object_hook: Any = ..., list_hook: Optional[Any] = ...,
           use_list: bool = ..., encoding: str = ...,
           unicode_errors: str = ..., object_pairs_hook: Optional[Any] = ...,
           max_buffer_size: int = ..., ext_hook: Any = ...) -> Any:
    ...


class Packer(_Packer):
    def __init__(self, default: Any = ..., encoding: str = ...,
                 unicode_errors: str = ..., use_single_float: bool = ...,
                 autoreset: int = ..., use_bin_type: int = ...) -> None:
        ...



class Unpacker(_Unpacker):
    def __init__(self, file_like: Optional[Any] = ..., read_size: int = ...,
                 use_list: bool = ..., object_hook: Any = ...,
                 object_pairs_hook: Optional[Any] = ...,
                 list_hook: Optional[Any] = ..., encoding: str = ...,
                 unicode_errors: str = ..., max_buffer_size: int = ...,
                 ext_hook: Any = ...) -> None:
        ...



class Iterator:
    path: Any = ...
    kwargs: Any = ...

    def __init__(self, path: Any, **kwargs: Any) -> None:
        ...


    def __iter__(self) -> None:
        ...
